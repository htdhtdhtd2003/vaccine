<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1"/>
  <title>Data Matrix Live Scanner + Box</title>
  <style>
    body { font-family: sans-serif; margin: 0; padding: 1em; }
    .cam-container {
      position: relative;
      width: 100%;
      max-width: 640px;
    }
    video, canvas {
      width: 100%;
      max-width: 640px;
      border-radius: 8px;
    }
    canvas {
      position: absolute;
      top: 0;
      left: 0;
      pointer-events: none; /* let clicks pass through */
    }
    #result { margin-top: 1em; white-space: pre-wrap; font-weight: bold; }
    button { margin-top: 1em; padding: .6em 1em; border-radius: 6px; }
  </style>
</head>
<body>
  <h1>Data Matrix Live Scanner</h1>
  <div class="cam-container">
    <video id="video" autoplay playsinline></video>
    <canvas id="overlay"></canvas>
  </div>
  <div id="result">Result: none</div>
  <button id="stopBtn" disabled>Stop</button>

  <script src="https://unpkg.com/@zxing/library@0.18.6/umd/index.min.js"></script>
  <script>
    const codeReader = new ZXingBrowser.BrowserMultiFormatReader();
    const video = document.getElementById('video');
    const overlay = document.getElementById('overlay');
    const ctx = overlay.getContext('2d');
    const resultDiv = document.getElementById('result');
    const stopBtn = document.getElementById('stopBtn');

    async function start() {
      try {
        const devices = await ZXingBrowser.BrowserCodeReader.listVideoInputDevices();
        const rearCam = devices.find(d => /back|rear|environment/i.test(d.label)) || devices[0];
        if (!rearCam) {
          resultDiv.textContent = 'No camera found';
          return;
        }
        stopBtn.disabled = false;
        resultDiv.textContent = 'Scanning...';

        await codeReader.decodeFromVideoDevice(
          rearCam.deviceId,
          'video',
          (result, err, controls) => {
            // resize overlay canvas to match video
            overlay.width = video.videoWidth;
            overlay.height = video.videoHeight;
            ctx.clearRect(0, 0, overlay.width, overlay.height);

            if (result) {
              resultDiv.textContent = 'Result: ' + result.getText();
              // draw polygon if available
              if (result.resultPoints && result.resultPoints.length) {
                ctx.strokeStyle = 'lime';
                ctx.lineWidth = 4;
                ctx.beginPath();
                const pts = result.resultPoints;
                ctx.moveTo(pts[0].x, pts[0].y);
                pts.slice(1).forEach(p => ctx.lineTo(p.x, p.y));
                ctx.closePath();
                ctx.stroke();
              }
            }
            if (err && !(err instanceof ZXing.NotFoundException)) {
              console.error(err);
            }
          }
        );
      } catch (e) {
        resultDiv.textContent = 'Error starting camera: ' + e;
      }
    }

    stopBtn.addEventListener('click', () => {
      codeReader.reset();
      stopBtn.disabled = true;
      ctx.clearRect(0, 0, overlay.width, overlay.height);
      resultDiv.textContent = 'Stopped.';
    });

    start();
  </script>
</body>
</html>
